import { Logger } from "../../logger";
import { FaceLandmarker, FaceLandmarkerResult, FilesetResolver } from "@mediapipe/tasks-vision";
import { DetectionRenderingContext, VideoDetector } from "./video.dto";
// import { getMediapipeVision } from "./libs/mediapipe";

export class FaceLandmarkConfig {
    //
}

export class FaceLandmarkDetector extends VideoDetector<FaceLandmarkerResult> {

    logger = new Logger(FaceLandmarkDetector.name)

    config: FaceLandmarkConfig
    faceLandmarker: FaceLandmarker

    async destroy() {
        this.faceLandmarker?.close()
    }

    async init(config: Partial<FaceLandmarkConfig>) {

        const defaultConfig: Partial<FaceLandmarkConfig> = {
            //
        }

        this.config = {...defaultConfig, ...config} as FaceLandmarkConfig

        const vision = await FilesetResolver.forVisionTasks(
          "https://cdn.jsdelivr.net/npm/@mediapipe/tasks-vision/wasm"
          );
        this.faceLandmarker = await FaceLandmarker.createFromOptions(vision, {
            baseOptions: {
                modelAssetPath: `https://storage.googleapis.com/mediapipe-models/face_landmarker/face_landmarker/float16/1/face_landmarker.task`,
                delegate: "GPU"
            },
            outputFaceBlendshapes: true,
            runningMode: "VIDEO",
            numFaces: 1
        });

    }

    async process(video: HTMLVideoElement) : Promise<FaceLandmarkerResult|null> {
        const ts = performance.now()
        const detections = this.faceLandmarker.detectForVideo(video, ts);
        return  detections ? detections : null
    }

    render(context: DetectionRenderingContext, results: FaceLandmarkerResult) {
        if (!results || !results.faceLandmarks) return

        const drawingUtils = context.utils

        const lineWidth = 0.5
        for (const landmarks of results.faceLandmarks) {
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_TESSELATION,
                { color: "#C0C0C070", lineWidth}
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_RIGHT_EYE,
                { color: "#FF3030", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_RIGHT_EYEBROW,
                { color: "#FF3030", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_LEFT_EYE,
                { color: "#30FF30", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_LEFT_EYEBROW,
                { color: "#30FF30", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_FACE_OVAL,
                { color: "#E0E0E0", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_LIPS,
                { color: "#E0E0E0", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_RIGHT_IRIS,
                { color: "#FF3030", lineWidth }
            );
            drawingUtils.drawConnectors(
                landmarks,
                FaceLandmarker.FACE_LANDMARKS_LEFT_IRIS,
                { color: "#30FF30", lineWidth }
            );
        }
    }

}